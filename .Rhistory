dmat <- as.matrix(dist(dat[,1:2], method='euclidean'))
n <- nrow(dmat)
threshold <- 1.0
cc <- 2
while(cc > 1){
adj <- (dmat <= threshold)
for(i in 1:n) adj[i,i] <- 0
g <- graph.adjacency(adj, mode="undirected")
cc <- clusters(g)$no
threshold <- 1.01 * threshold
}
lout <- as.matrix(dat[,1:2])
laplace <- diag(rowSums(adj)) - adj
A.uu <- laplace[lbl==0, lbl==0]
A.ul <- laplace[lbl==0, lbl==1]
lab.l <- cls[lbl==1]
lab.u <- -solve(A.uu) %*% A.ul %*% lab.l
voltage <- rep(0,n)
voltage[lbl==1] <- lab.l
voltage[lbl==0] <- lab.u
library(colorRamps)
V(g)$color <- rev(green2red(101))[1+round(voltage,2)*100]
V(g)$frame.color <- sapply(lbl, function(i) if(i==0) 'grey' else 'black')
V(g)$size <- sapply(lbl, function(i) if(i==0) 3 else 5)
plot(g,
vertex.label=NA,
layout=lout,
edge.color="lightgrey"
)
hist(voltage, breaks=20, col='lightgrey')
?colorbar.plot
?colorbar
labprob <- 0.05 # proportion of labeled points
winsize <- 6    # size of sliding graph
ssize <- 100    # sample size per class
mixing <- 1.0   # relative sd of the two classes
dat <- make_2_normal_clusters(ssize,ssize,
l1=ceiling(labprob*ssize),
l2=ceiling(labprob*ssize),
sd1=mixing)
instream <- permute_data(dat, random=TRUE, labelsfirst=TRUE)
plot(instream$X1,instream$X2, col=instream$cls+2, pch=19, xlab='', ylab='', frame.plot=0)
points(instream$X1[instream$lbl==1], instream$X2[instream$lbl==1], lwd=3, cex=1.5)
runtime <- system.time(
outstream <- tlp(instream, winsize=winsize)
)
plot(instream$X1,instream$X2, col=instream$cls+2, pch=19,
xlab='', ylab='', axes=FALSE)
points(instream$X1[instream$lbl==1], instream$X2[instream$lbl==1], lwd=3, cex=1.5)
source('~/Projects/201808-electric-ssl/expt-2.R')
source('~/Projects/201808-electric-ssl/expt-2.R')
plot(instream$X1,instream$X2, col=instream$cls+2, pch=19, cex=2,
xlab='', ylab='', axes=FALSE)
points(instream$X1[instream$lbl==1], instream$X2[instream$lbl==1], lwd=3, cex=1.5)
points(instream$X1[instream$lbl==1], instream$X2[instream$lbl==1], lwd=3, cex=2.5)
plot(instream$X1,instream$X2, col=instream$cls+2, pch=19, cex=2,
xlab='', ylab='', axes=FALSE)
points(instream$X1[instream$lbl==1], instream$X2[instream$lbl==1], lwd=3, cex=2.5)
col <- rev(green2red(101))[1+round(outstream$cls,2)*100]
plot(outstream$X1, outstream$X2, col=col, pch=19, cex=2, xlab='', ylab='',
axes=FALSE)
points(outstream$X1[outstream$lbl==1], outstream$X2[outstream$lbl==1], lwd=3, cex=2.5)
source('~/Projects/201808-electric-ssl/expt-2.R')
source('~/Projects/201808-electric-ssl/expt-2.R')
source('~/Projects/201808-electric-ssl/expt-2.R')
source("functions.R")
labprob <- 0.05 # proportion of labeled points
winsize <- 6    # size of sliding graph
ssize <- 10    # sample size per class
mixing <- 1.0   # relative sd of the two classes
dat <- make_2_normal_clusters(ssize,ssize,
l1=ceiling(labprob*ssize),
l2=ceiling(labprob*ssize),
sd1=mixing)
instream <- permute_data(dat, random=TRUE, labelsfirst=TRUE)
plot(instream$X1,instream$X2, col=instream$cls+2, pch=19, cex=2,
xlab='', ylab='', axes=FALSE)
points(instream$X1[instream$lbl==1], instream$X2[instream$lbl==1], lwd=3, cex=2.5)
runtime <- system.time(
outstream <- tlp(instream, winsize=winsize, viz=TRUE)
)
?system
source('~/Projects/201808-electric-ssl/expt-2.R')
source('~/Projects/201808-electric-ssl/expt-2.R')
setwd("~/Projects/201808-electric-ssl/tmp")
setwd("..")
setwd("../tmp")
setwd("./tmp")
setwd("..")
source('~/Projects/201808-electric-ssl/expt-2.R')
source('~/Projects/201808-electric-ssl/expt-2.R')
source("functions.R")
labprob <- 0.02 # proportion of labeled points
winsize <- 6    # size of sliding graph
ssize <- 100    # sample size per class
mixing <- 1.0   # relative sd of the two classes
dat <- make_2_normal_clusters(ssize,ssize,
l1=ceiling(labprob*ssize),
l2=ceiling(labprob*ssize),
sd1=mixing)
instream <- permute_data(dat, random=TRUE, labelsfirst=TRUE)
plot(instream$X1,instream$X2, col=instream$cls+2, pch=19, cex=2,
xlab='', ylab='', axes=FALSE)
points(instream$X1[instream$lbl==1], instream$X2[instream$lbl==1], lwd=3, cex=2.5)
labprob <- 0.02 # proportion of labeled points
winsize <- 6    # size of sliding graph
ssize <- 100    # sample size per class
mixing <- 1.0   # relative sd of the two classes
dat <- make_2_normal_clusters(ssize,ssize,
l1=ceiling(labprob*ssize),
l2=ceiling(labprob*ssize),
sd1=mixing)
# input/output data streams...
# either astream through one class and then the other,
# or permute randomly:
instream <- permute_data(dat, random=TRUE, labelsfirst=TRUE)
plot(instream$X1,instream$X2, col=instream$cls+2, pch=19, cex=2,
xlab='', ylab='', axes=FALSE)
points(instream$X1[instream$lbl==1], instream$X2[instream$lbl==1], lwd=3, cex=2.5)
labprob <- 0.02 # proportion of labeled points
winsize <- 6    # size of sliding graph
ssize <- 100    # sample size per class
mixing <- 1.0   # relative sd of the two classes
dat <- make_2_normal_clusters(ssize,ssize,
l1=ceiling(labprob*ssize),
l2=ceiling(labprob*ssize),
sd1=mixing)
# input/output data streams...
# either astream through one class and then the other,
# or permute randomly:
instream <- permute_data(dat, random=TRUE, labelsfirst=TRUE)
plot(instream$X1,instream$X2, col=instream$cls+2, pch=19, cex=2,
xlab='', ylab='', axes=FALSE)
points(instream$X1[instream$lbl==1], instream$X2[instream$lbl==1], lwd=3, cex=2.5)
labprob <- 0.02 # proportion of labeled points
winsize <- 6    # size of sliding graph
ssize <- 100    # sample size per class
mixing <- 1.0   # relative sd of the two classes
dat <- make_2_normal_clusters(ssize,ssize,
l1=ceiling(labprob*ssize),
l2=ceiling(labprob*ssize),
sd1=mixing)
# input/output data streams...
# either astream through one class and then the other,
# or permute randomly:
instream <- permute_data(dat, random=TRUE, labelsfirst=TRUE)
plot(instream$X1,instream$X2, col=instream$cls+2, pch=19, cex=2,
xlab='', ylab='', axes=FALSE)
points(instream$X1[instream$lbl==1], instream$X2[instream$lbl==1], lwd=3, cex=2.5)
labprob <- 0.02 # proportion of labeled points
winsize <- 6    # size of sliding graph
ssize <- 100    # sample size per class
mixing <- 1.0   # relative sd of the two classes
dat <- make_2_normal_clusters(ssize,ssize,
l1=ceiling(labprob*ssize),
l2=ceiling(labprob*ssize),
sd1=mixing)
# input/output data streams...
# either astream through one class and then the other,
# or permute randomly:
instream <- permute_data(dat, random=TRUE, labelsfirst=TRUE)
plot(instream$X1,instream$X2, col=instream$cls+2, pch=19, cex=2,
xlab='', ylab='', axes=FALSE)
points(instream$X1[instream$lbl==1], instream$X2[instream$lbl==1], lwd=3, cex=2.5)
labprob <- 0.02 # proportion of labeled points
winsize <- 6    # size of sliding graph
ssize <- 100    # sample size per class
mixing <- 1.0   # relative sd of the two classes
dat <- make_2_normal_clusters(ssize,ssize,
l1=ceiling(labprob*ssize),
l2=ceiling(labprob*ssize),
sd1=mixing)
# input/output data streams...
# either astream through one class and then the other,
# or permute randomly:
instream <- permute_data(dat, random=TRUE, labelsfirst=TRUE)
plot(instream$X1,instream$X2, col=instream$cls+2, pch=19, cex=2,
xlab='', ylab='', axes=FALSE)
points(instream$X1[instream$lbl==1], instream$X2[instream$lbl==1], lwd=3, cex=2.5)
labprob <- 0.02 # proportion of labeled points
winsize <- 6    # size of sliding graph
ssize <- 100    # sample size per class
mixing <- 1.0   # relative sd of the two classes
dat <- make_2_normal_clusters(ssize,ssize,
l1=ceiling(labprob*ssize),
l2=ceiling(labprob*ssize),
sd1=mixing)
# input/output data streams...
# either astream through one class and then the other,
# or permute randomly:
instream <- permute_data(dat, random=TRUE, labelsfirst=TRUE)
plot(instream$X1,instream$X2, col=instream$cls+2, pch=19, cex=2,
xlab='', ylab='', axes=FALSE)
points(instream$X1[instream$lbl==1], instream$X2[instream$lbl==1], lwd=3, cex=2.5)
labprob <- 0.02 # proportion of labeled points
winsize <- 6    # size of sliding graph
ssize <- 100    # sample size per class
mixing <- 1.0   # relative sd of the two classes
dat <- make_2_normal_clusters(ssize,ssize,
l1=ceiling(labprob*ssize),
l2=ceiling(labprob*ssize),
sd1=mixing)
# input/output data streams...
# either astream through one class and then the other,
# or permute randomly:
instream <- permute_data(dat, random=TRUE, labelsfirst=TRUE)
plot(instream$X1,instream$X2, col=instream$cls+2, pch=19, cex=2,
xlab='', ylab='', axes=FALSE)
points(instream$X1[instream$lbl==1], instream$X2[instream$lbl==1], lwd=3, cex=2.5)
labprob <- 0.02 # proportion of labeled points
winsize <- 6    # size of sliding graph
ssize <- 100    # sample size per class
mixing <- 1.0   # relative sd of the two classes
dat <- make_2_normal_clusters(ssize,ssize,
l1=ceiling(labprob*ssize),
l2=ceiling(labprob*ssize),
sd1=mixing)
# input/output data streams...
# either astream through one class and then the other,
# or permute randomly:
instream <- permute_data(dat, random=TRUE, labelsfirst=TRUE)
plot(instream$X1,instream$X2, col=instream$cls+2, pch=19, cex=2,
xlab='', ylab='', axes=FALSE)
points(instream$X1[instream$lbl==1], instream$X2[instream$lbl==1], lwd=3, cex=2.5)
labprob <- 0.02 # proportion of labeled points
winsize <- 6    # size of sliding graph
ssize <- 100    # sample size per class
mixing <- 1.0   # relative sd of the two classes
dat <- make_2_normal_clusters(ssize,ssize,
l1=ceiling(labprob*ssize),
l2=ceiling(labprob*ssize),
sd1=mixing)
# input/output data streams...
# either astream through one class and then the other,
# or permute randomly:
instream <- permute_data(dat, random=TRUE, labelsfirst=TRUE)
plot(instream$X1,instream$X2, col=instream$cls+2, pch=19, cex=2,
xlab='', ylab='', axes=FALSE)
points(instream$X1[instream$lbl==1], instream$X2[instream$lbl==1], lwd=3, cex=2.5)
runtime <- system.time(
outstream <- tlp(instream, winsize=winsize, viz=TRUE)
)
col <- rev(green2red(101))[1+round(outstream$cls,2)*100]
plot(outstream$X1, outstream$X2, col=col, pch=19, cex=2, xlab='', ylab='',
axes=FALSE)
points(outstream$X1[outstream$lbl==1], outstream$X2[outstream$lbl==1], lwd=3, cex=2.5)
source('~/Projects/201808-electric-ssl/expt-2.R')
instream <- permute_data(dat, random=FALSE, labelsfirst=TRUE)
plot(instream$X1,instream$X2, col=instream$cls+2, pch=19, cex=2,
xlab='', ylab='', axes=FALSE)
points(instream$X1[instream$lbl==1], instream$X2[instream$lbl==1], lwd=3, cex=2.5)
runtime <- system.time(
outstream <- tlp(instream, winsize=winsize, viz=TRUE)
)
boxplot(outstream$cls ~ instream$cls,
xlab="Actual class",
ylab="Estimated class",
col='yellow', frame.plot=0)
col <- rev(green2red(101))[1+round(outstream$cls,2)*100]
plot(outstream$X1, outstream$X2, col=col, pch=19, cex=2, xlab='', ylab='',
axes=FALSE)
points(outstream$X1[outstream$lbl==1], outstream$X2[outstream$lbl==1], lwd=3, cex=2.5)
source('~/Projects/201808-electric-ssl/expt-2.R')
boxplot(outstream$cls ~ instream$cls,
xlab="Actual class",
ylab="Estimated class",
col='grey', frame.plot=0)
boxplot(outstream$cls ~ instream$cls,
xlab="Actual class",
ylab="Voltage",
col='grey', frame.plot=0)
source("functions.R")
runtime <- system.time(
outstream <- tlp(instream, winsize=winsize, viz=TRUE)
)
runtime <- system.time(
outstream <- tlp(instream, winsize=winsize, viz=TRUE)
)
source("functions.R")
runtime <- system.time(
outstream <- tlp(instream, winsize=winsize, viz=TRUE)
)
source('~/Projects/201808-electric-ssl/expt-1.R')
source('~/Projects/201808-electric-ssl/expt-1.R')
source('~/Projects/201808-electric-ssl/expt-1.R')
lout <- as.matrix(dat[,1:2])
V(g)$color <- sapply(lbl[V(g)] * cls[V(g)],
function(i)
if(i==0) 'white' else if(i==1) 'red' else if(i==2) 'green'
)
plot(g,
vertex.size=3,
vertex.label=NA,
layout=lout,
vertex.frame.color="grey",
edge.color="lightgrey"
)
V(g)$color <- sapply(lbl[V(g)] + cls[V(g)],
function(i)
if(i==0) 'white' else if(i==1) 'red' else if(i==2) 'green'
)
plot(g,
vertex.size=3,
vertex.label=NA,
layout=lout,
vertex.frame.color="grey",
edge.color="lightgrey"
)
V(g)$color <- rev(green2red(101))[1+round(voltage,2)*100]
V(g)$frame.color <- sapply(lbl, function(i) if(i==0) 'grey' else 'black')
V(g)$size <- sapply(lbl, function(i) if(i==0) 3 else 5)
plot(g,
vertex.label=NA,
layout=lout,
edge.color="lightgrey"
)
hist(voltage, breaks=20, col='lightgrey')
cls
V(g)$color <- sapply(cls, function(i) if(i==0) 'red' else 'red')
V(g)$frame.color <- sapply(lbl, function(i) if(i==0) 'grey' else 'black')
V(g)$size <- sapply(lbl, function(i) if(i==0) 3 else 5)
plot(g,
vertex.label=NA,
layout=lout,
edge.color="white"
)
cls
V(g)$color <- sapply(cls, function(i) if(i==0) 'red' else 'green')
V(g)$frame.color <- sapply(lbl, function(i) if(i==0) 'grey' else 'black')
V(g)$size <- sapply(lbl, function(i) if(i==0) 3 else 5)
plot(g,
vertex.label=NA,
layout=lout,
edge.color="white"
)
V(g)$color <- rev(green2red(101))[1+round(voltage,2)*100]
V(g)$frame.color <- sapply(lbl, function(i) if(i==0) 'grey' else 'black')
V(g)$size <- sapply(lbl, function(i) if(i==0) 3 else 5)
plot(g,
vertex.label=NA,
layout=lout,
edge.color="lightgrey"
)
hist(voltage, breaks=20, col='lightgrey')
V(g)$color <- sapply(cls, function(i) if(i==0) 'red' else 'green')
V(g)$frame.color <- sapply(lbl, function(i) if(i==0) 'grey' else 'black')
V(g)$size <- sapply(lbl, function(i) if(i==0) 3 else 5)
plot(g,
vertex.label=NA,
layout=lout,
edge.color="white"
)
hist(voltage, breaks=20, col='lightgrey', main="")
res <- read.table(sprintf("zip_expt_%d.txt", lowdim))
names(res) <- c("n",
"cls",
"lbl",
"win",
"softerr",
"harderr",
"time")
attach(res)
normtime <- time/res$n
boxplot(normtime ~ win,
xlab="Window size",
ylab="Time per item",
col='yellow', frame.plot=0)
boxplot(harderr ~ win,
xlab="Window size",
ylab="Prediction error",
col='yellow', frame.plot=0)
boxplot(softerr ~ win,
xlab="Window size",
ylab="Prediction error",
col='yellow', frame.plot=0)
lblprob <- lbl/res$n
plot(softerr ~ lblprob,
col='blue',
xlab="Proportion of labels",
ylab="Error",
ylim=c(0,0.9),
frame.plot=0)
points(harderr ~ lblprob,
col='red')
legend("topright",
legend=c("Soft error", "Hard error"),
col=c("blue","red"),
pch=1, bty='n')
legend("topright",
legend=c("Soft error", "Hard error"),
col=c("blue","red"),
pch=1)
dim(res)
table(cls)
cls
res$cls
res$win
table(win)
source('~/Projects/201808-electric-ssl/expt-1.R')
source('~/Projects/201808-electric-ssl/expt-1.R')
source('~/Projects/201808-electric-ssl/expt-1.R')
source('~/Projects/201808-electric-ssl/electric-ssl/expt-2.R')
setwd("~/Projects/201808-electric-ssl/electric-ssl")
source('~/Projects/201808-electric-ssl/electric-ssl/expt-2.R')
source('~/Projects/201808-electric-ssl/electric-ssl/expt-2.R')
source('~/Projects/201808-electric-ssl/electric-ssl/expt-2.R')
source('~/Projects/201808-electric-ssl/electric-ssl/expt-2.R')
source('~/Projects/201808-electric-ssl/electric-ssl/expt-2.R')
runtime <- system.time(
outstream <- tlp(instream, winsize=winsize, viz=TRUE)
)
source('~/Projects/201808-electric-ssl/electric-ssl/expt-2.R')
source('~/Projects/201808-electric-ssl/electric-ssl/expt-2.R')
source('~/Projects/201808-electric-ssl/electric-ssl/expt-2.R')
source('~/Projects/201808-electric-ssl/electric-ssl/expt-2.R')
source("functions.R")
instream <- permute_data(dat, random=TRUE, labelsfirst=TRUE)
plot(instream$X1,instream$X2, col=instream$cls+2, pch=19, cex=2,
xlab='', ylab='', axes=FALSE)
points(instream$X1[instream$lbl==1], instream$X2[instream$lbl==1], lwd=3, cex=2.5)
runtime <- system.time(
outstream <- tlp(instream, winsize=winsize, viz=TRUE)
)
# we can now compare the output soft classes with the
# (known but withheld) actual stream classes:
boxplot(outstream$cls ~ instream$cls,
xlab="Actual class",
ylab="Voltage",
col='grey', frame.plot=0)
# or scatterplot:
col <- rev(green2red(101))[1+round(outstream$cls,2)*100]
plot(outstream$X1, outstream$X2, col=col, pch=19, cex=2, xlab='', ylab='',
axes=FALSE)
points(outstream$X1[outstream$lbl==1], outstream$X2[outstream$lbl==1], lwd=3, cex=2.5)
# average error:
err.soft <- mean(outstream$cls[instream$cls==0]) + 1 - mean(outstream$cls[instream$cls==1])
err.hard <- (length(outstream$cls[instream$cls==0 & outstream$cls >= 0.5])
+ length(outstream$cls[instream$cls==1 & outstream$cls <= 0.5]))/length(outstream$cls)
cat(sprintf("Soft error: %g\nHard error: %g\nRun time: %g\n",
err.soft,
err.hard,
runtime[3]))
source('~/Projects/201808-electric-ssl/electric-ssl/expt-1.R')
source('~/Projects/201808-electric-ssl/electric-ssl/expt-1.R')
source('~/Projects/201808-electric-ssl/electric-ssl/expt-2.R')
res <- read.table(sprintf("zip_expt_%d.txt", lowdim))
names(res) <- c("n",
"cls",
"lbl",
"win",
"softerr",
"harderr",
"time")
attach(res)
setwd("~/Projects/201808-electric-ssl/electric-ssl")
res <- read.table(sprintf("zip_expt_%d.txt", lowdim))
lowdim <- 3
res <- read.table(sprintf("zip_expt_%d.txt", lowdim))
names(res) <- c("n",
"cls",
"lbl",
"win",
"softerr",
"harderr",
"time")
attach(res)
normtime <- time/res$n
boxplot(normtime ~ win,
xlab="Window size",
ylab="Time per item",
col='lightgrey', frame.plot=0)
boxplot(harderr ~ win,
xlab="Window size",
ylab="Prediction error",
col='lightgrey', frame.plot=0)
lblprob <- lbl/res$n
plot(softerr ~ lblprob,
col='blue',
xlab="Proportion of labels",
ylab="Error",
ylim=c(0,0.9),
frame.plot=0)
points(harderr ~ lblprob,
col='red')
legend("topright",
legend=c("Soft error", "Hard error"),
col=c("blue","red"),
pch=1)
plot(softerr ~ res$n,
col='blue',
xlab="Data size",
ylab="Error",
ylim=c(0,1),
frame.plot=0)
plot(softerr ~ lblprob,
col='blue',
xlab="Proportion of labels",
ylab="Error",
ylim=c(0,0.9),
frame.plot=0)
points(harderr ~ lblprob,
col='red')
legend("centerright",
legend=c("Soft error", "Hard error"),
col=c("blue","red"),
pch=1)
plot(softerr ~ res$n,
col='blue',
xlab="Data size",
ylab="Error",
ylim=c(0,1),
frame.plot=0)
